#!/usr/bin/env python

'QPLOT-POP-MODEL -- plot quantiles for population model'
__usage__ = 'qplot-pop-model pop_model.csv [-p popmodel -o /path/to/plot.png -v]'
__author__ = 'Philippe Landry (pgjlandry@gmail.com)'
__date__ = '02-2021'

from argparse import ArgumentParser
import numpy as np
import numpy.random
import os
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import seaborn as sns
import sodapop.populations as pop
import videlicet.viz as viz

parser = ArgumentParser(description=__doc__)
parser.add_argument('popmodeldata')
parser.add_argument('-d', '--delim', help='delimiter for data file, DEFAULT=","', default=',')
parser.add_argument('-w', '--weightcol', help='name of posterior weight column to use, DEFAULT="weight"', default='weight')
parser.add_argument('-p', '--popmodel', help='name of population model, DEFAULT="doublegaussian_m1m2"', default="doublegaussian_m1m2", type=str)
parser.add_argument('-o', '--outpath', help='path for output population parameter samples, DEFAULT=AUTO', default=False)
parser.add_argument('-m', '--mrange', help='mass range for plot, DEFAULT="0.5 3."', default=[0.5,3.])
parser.add_argument('-n', '--nummods', help='number of population model realizations to use for computing confidence intervals, DEFAULT=1000', default=1e4, type=float)
parser.add_argument('-b', '--binary', help='make separate m1 and m2 plots', action='store_false', default=True)
parser.add_argument('-M', '--maxap', help='plot the maximum a posteriori instead of the median', action='store_true', default=False)
parser.add_argument('-f', '--fairdraws', help='number of population model realizations to plot, DEFAULT=None', default=False, type=float)
parser.add_argument('-q', '--quantiles', help='quantiles to plot, DEFAULT=None', default=False, type=float, nargs=3)
parser.add_argument('-r', '--refdat', help='reference data for rugplot, e.g. /path/to/samples.csv,m, DEFAULT=None', default=False, nargs='+')
parser.add_argument('-v', '--verbose', action='store_true', default=False)
args = parser.parse_args()

if args.outpath: out_path = args.outpath
else: out_path = os.path.dirname(args.popmodeldata)+'/'+os.path.basename(args.popmodeldata).split('.')[0]+'.png'

refvals = []
if args.refdat:
	for refdat in args.refdat:
		refvars = refdat.split(',')
		if len(refvars) == 3:
			ref,col1,col2 = refvars
			cols = [col1,col2]
		else:
			ref,col = refvars
			cols = [col]
		refdata = np.genfromtxt(ref, names=True, delimiter=',', dtype=None, encoding=None)
		refmed = [np.percentile(refdata[column],50) for column in cols]
		refvals.append(refmed)

MMIN = args.mrange[0]
MMAX = args.mrange[1]

NUM_MODELS = int(args.nummods)

if args.fairdraws:
	if args.fairdraws > NUM_MODELS: NUM_DRAWS = NUM_MODELS
	else: NUM_DRAWS = int(args.fairdraws)
	
if args.quantiles:
	QUANTS = 100.*np.array(args.quantiles)
else:
	QUANTS = [50,50,50]

# load posterior samples

popdata = np.genfromtxt(args.popmodeldata, names=True, dtype=None, delimiter=args.delim, encoding=None)
param_names = pop.get_pop_params(args.popmodel).split(',')
params = np.column_stack([popdata[param_name] for param_name in param_names])
wts = popdata[args.weightcol]
wts = wts/np.sum(wts)
maxap = np.max(wts)

maxap_idx = np.where(wts == wts.max())[0][0]
maxap_params = params[maxap_idx]

idxs = np.random.choice(len(wts),size=NUM_MODELS,replace=True,p=wts)
params_out = [params[idx] for idx in idxs]

pop_like = pop.get_pop_prior(args.popmodel)
mgrid = np.arange(MMIN,MMAX,0.02)

fig, ax = plt.subplots()

if not args.binary:

	if args.fairdraws:
		for i,param in enumerate(params_out[:NUM_DRAWS]):
			m_likes = [pop_like(m,*param) for m in mgrid]
			m_likes = m_likes/np.sum(m_likes)
			plt.plot(mgrid, m_likes, alpha=0.1, color=sns.color_palette()[1], lw=1.)
	
	if args.quantiles or (not args.maxap):
		m_lb = []
		m_med = []
		m_ub = []
		for m in mgrid:
	
			m_likes = [pop_like(m,*params) for params in params_out]
			m_cl = np.percentile(m_likes,QUANTS)
			m_lb.append(m_cl[0])
			m_med.append(m_cl[1])
			m_ub.append(m_cl[2])
	
		norm = np.sum(m_med)
		m_med = m_med/norm
		m_lb = m_lb/norm
		m_ub = m_ub/norm
		
		plt.plot(mgrid, m_lb, alpha=1., color=sns.color_palette()[0], lw=1.)
		plt.plot(mgrid, m_ub, alpha=1., color=sns.color_palette()[0], lw=1.)
		plt.fill_between(mgrid, m_lb, m_ub, alpha=0.1, color=sns.color_palette()[0])
		if not args.maxap: plt.plot(mgrid, m_med, alpha=1., color=sns.color_palette()[0], lw=2.)
	
	if args.maxap:
		m_likes = [pop_like(m,*maxap_params) for m in mgrid]
		m_likes = m_likes/np.sum(m_likes)
		plt.plot(mgrid, m_likes, alpha=1., color=sns.color_palette()[0], lw=2.)
	
	if args.refdat:
		vals = [refval[0] for refval in refvals]
		sns.rugplot(vals, expand_margins=False, color=sns.color_palette()[1], lw=2.)
	
	plt.xlabel('m [M_sun]')
	viz.viz_style()
	plt.savefig(out_path)
	
else:

	if args.fairdraws:
		for i,param in enumerate(params_out[:NUM_DRAWS]):
			m1_likes = [pop_like(m1,*param) for m1 in mgrid]
			m1_likes = m1_likes/np.sum(m1_likes)
			plt.plot(mgrid, m1_likes, alpha=0.1, color=sns.color_palette()[1], lw=1.)

	if args.quantiles or (not args.maxap):
		m1_lb = []
		m1_med = []
		m1_ub = []
		for m1 in mgrid:
		
			m1_likes = [pop_like(m1,*params) for params in params_out]
			m1_cl = np.percentile(m1_likes,QUANTS)
			m1_lb.append(m1_cl[0])
			m1_med.append(m1_cl[1])
			m1_ub.append(m1_cl[2])
		
		norm = np.sum(m_med)
		m_med = m_med/norm
		m_lb = m_lb/norm
		m_ub = m_ub/norm
			
		plt.plot(mgrid, m1_lb, alpha=1., color=sns.color_palette()[0], lw=1.)
		plt.plot(mgrid, m1_ub, alpha=1., color=sns.color_palette()[0], lw=1.)
		if not args.maxap: plt.plot(mgrid, m1_med, alpha=1., color=sns.color_palette()[0], lw=2.)

	if args.maxap:
		m1_likes = [pop_like(m1,*maxap_params) for m1 in mgrid]
		m1_likes = m1_likes/np.sum(m1_likes)
		plt.plot(mgrid, m1_likes, alpha=1., color=sns.color_palette()[0], lw=2.)

	if args.refdat:
		vals = [refval[0] for refval in refvals]
		sns.rugplot(vals, expand_margins=False, color=sns.color_palette()[1], lw=2.)

	plt.xlabel('m_1 [M_sun]')
	viz.viz_style()
	plt.savefig(out_path.split('.png')[0]+'-m1.png')

	fig, ax = plt.subplots()
	
	if args.fairdraws:
		for i,param in enumerate(params_out[:NUM_DRAWS]):
			m2_likes = [pop_like(m2,*param) for m2 in mgrid]
			m2_likes = m2_likes/np.sum(m2_likes)
			plt.plot(mgrid, m2_likes, alpha=0.1, color=sns.color_palette()[1], lw=1.)

	if args.quantiles or (not args.maxap):
		m2_lb = []
		m2_med = []
		m2_ub = []
		for m2 in mgrid:
		
			m2_likes = [pop_like(m2,*params) for params in params_out]
			m2_cl = np.percentile(m2_likes,QUANTS)
			m2_lb.append(m2_cl[0])
			m2_med.append(m2_cl[1])
			m2_ub.append(m2_cl[2])
		
		norm = np.sum(m_med)
		m_med = m_med/norm
		m_lb = m_lb/norm
		m_ub = m_ub/norm
			
		plt.plot(mgrid, m2_lb, alpha=1., color=sns.color_palette()[0], lw=1.)
		plt.plot(mgrid, m2_ub, alpha=1., color=sns.color_palette()[0], lw=1.)
		if not args.maxap: plt.plot(mgrid, m2_med, alpha=1., color=sns.color_palette()[0], lw=2.)

	if args.maxap:
		m2_likes = [pop_like(m2,*maxap_params) for m2 in mgrid]
		m2_likes = m2_likes/np.sum(m2_likes)
		plt.plot(mgrid, m2_likes, alpha=1., color=sns.color_palette()[0], lw=2.)

	if args.refdat:
		vals = [refval[1] for refval in refvals]
		sns.rugplot(vals, expand_margins=False, color=sns.color_palette()[1], lw=2.)

	plt.xlabel('m_2 [M_sun]')
	viz.viz_style()
	plt.savefig(out_path.split('.png')[0]+'-m2.png')

