#!/usr/bin/python

'EXTRACT-POP-PARAM-QUANTILES -- extract quantiles from population parameter distributions'
__usage__ = 'extract-pop-param-quantiles /path/to/post.csv col [col1 col2 ...] [-o /path/to/output.csv ...]'
__author__ = 'pgjlandry@gmail.com'
__date__ = '02-2021'

# LOAD PACKAGES

from argparse import ArgumentParser
import numpy as np
import os
import numpy.random
import scipy
from scipy.stats import gaussian_kde

# SET UP OPTIONS

parser = ArgumentParser(description=__doc__)
parser.add_argument('postdata', type=str)
parser.add_argument('col', type=str, nargs='+')
parser.add_argument('-q', '--quantiles', default=[0.05,0.5,0.95], help='quantiles to return, DEFAULT="0.05 0.5 0.95"', type=float, nargs='+')
#parser.add_argument('-N', '--numsamps', default=1e6, help='number of equal-weight samples for quantile calculation, DEFAULT=1e6', type=float)
parser.add_argument('-l', '--steplengths', default=[0.1,0.1,0.1,0.1,0.1,0.1,0.1], help='grid spacings for MAP search, DEFAULT=0.1 0.1 0.1 0.1 0.1 0.1 0.1', nargs='+')
parser.add_argument('-o', '--outpath', default=False, help='path for output, DEFAULT=AUTO')
parser.add_argument('-w', '--weightcol', default=False, help='EOS weight column, DEFAULT=False', type=str)
parser.add_argument('--logweights', help='toggle exponentiating weights, DEFAULT=False', action='store_true', default=False)
parser.add_argument('-t','--qtype', help='quantile type, symmetric (sym) or HPD (hpd), DEFAULT="sym"', default="sym", type=str)
parser.add_argument('-b', '--numbins', default=False, help='number of bins to use for histogram-based HPD interval calculator, DEFAULT=AUTO', type=int)
parser.add_argument('-v', '--verbose', action='store_true', default=False)
args = parser.parse_args()

###

if args.outpath: outpath = args.outpath
else: outpath = os.path.dirname(args.postdata)+'/'+os.path.basename(args.postdata).split('.')[0]+'_quantiles.csv'

# DEFINE HPD INTERVAL CALCULATOR

def hpd_sample(dat,cl,num_bins=False):
	
	dat = [datum for datum in dat if datum == datum]
	norm = len(dat)
	if not num_bins: num_bins = int(np.sqrt(norm))
	dat = np.array(dat)
	hist, bin_edges = np.histogram(dat,bins=num_bins)
	bins = [(bin_edges[i],bin_edges[i+1]) for i in range(len(bin_edges)-1)]
	hist_dat = list(zip(hist,bins))
	hist_dat.sort(reverse=True)
	hist, bins = zip(*hist_dat)
	hist = list(hist)
	bins = list(bins)

	for i in range(len(bins)):
		subdat = []
		for j in range(i+1):
			bini = bins[j]
			subdat.extend(dat[(dat >= bini[0]) & (dat < bini[1])])
			prob = float(len(list(subdat)))/norm
			if i == 0: maxap = 0.5*(min(subdat)+max(subdat))
			if prob >= cl: break

	lb, ub = min(subdat), max(subdat)

	return lb, maxap, ub

# CALCULATE CREDIBLE INTERVALS

postdat = np.genfromtxt(args.postdata,dtype=None,delimiter=",",names=True,encoding=None)
if args.weightcol:
	if not args.logweights: wts = postdat[args.weightcol]
	else: wts = np.exp(postdat[args.weightcol])
else: wts = np.ones(len(postdat[postdat.dtype.names[0]]))
wts = wts/np.sum(wts)

cols_list = args.col

kde = gaussian_kde(np.vstack([postdat[col] for col in cols_list]))

mins = []
maxs = []
for col in cols_list:
	samps = postdat[col]
	mins += [np.min(samps)]
	maxs += [np.max(samps)]
	
coords = [np.arange(mins[i],maxs[i],float(args.steplengths[i])) for i in range(len(cols_list))]
grid = np.meshgrid(*coords)
uniform_samples = np.vstack([param.ravel() for param in grid])	
	
kde_wts = kde(uniform_samples)
mode = np.argmax(kde_wts)
mode_params = [uniform_samples[i][mode] for i in range(len(cols_list))]
print(mode_params)

full_qs = []
for col in cols_list:
	samps_equal_wt = postdat[col] # specialize to equal-weight posterior samples
#	samps_equal_wt = np.random.choice(samps,size=int(args.numsamps),p=wts)
#	samps_equal_wt = [samp for samp in samps_equal_wt if not np.isinf(samp)]

	q_dat = [col]
	if args.qtype != "hpd": # sym

		quants = [np.percentile(samps_equal_wt,100.*q) for q in args.quantiles]
	
	else: # hpd

		cl = args.quantiles[2]-args.quantiles[0]
		quants = hpd_sample(samps_equal_wt,cl,args.numbins)
	
	for quant in quants:
		q_dat.append(quant)
	
	full_qs.append(np.array(q_dat))

# SAVE DATA

head = 'param,'+','.join(['{0:.2f}'.format(q) for q in args.quantiles])
np.savetxt(outpath,np.array(full_qs),fmt='%s',delimiter=',',header=head,comments='')

